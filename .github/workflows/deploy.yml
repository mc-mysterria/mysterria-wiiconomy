name: deploy.yml

on:
  push:
    branches: [ main, production ]
    paths:
      - 'src/**'
      - 'config/**'
      - 'worlds/**'
      - 'pom.xml'
      - 'build.gradle'
      - 'build.gradle.kts'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.config.outputs.targets }}
      plugin_name: ${{ steps.build_plugin.outputs.plugin_name }}
      plugin_filename: ${{ steps.build_plugin.outputs.plugin_filename }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout deployment config
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/minecraft-deployment-config
          token: ${{ secrets.CONFIG_REPO_TOKEN }}
          path: .deployment-config

      - name: Load deployment targets
        id: config
        run: |
          set -e
          REPO_NAME="${{ github.repository }}"
          SERVER_CONFIG=".deployment-config/servers.json"

          if [ ! -f "$SERVER_CONFIG" ]; then
            echo "⚠️ Server configuration file not found"
            exit 1
          fi

          TARGETS=$(jq -c --arg repo "$REPO_NAME" '
            if .[$repo] then
              [
                # If environments exist, expand them
                ( .[$repo].environments | to_entries[]? | {
                  name: .key,
                  server_id: .value.server_id,
                  pelican_url: .value.pelican_url,
                  api_key_secret: .value.api_key_secret
                } ),
                # Otherwise, take top-level if server_id exists
                ( .[$repo] | select(has("server_id")) | {
                  name: "default",
                  server_id: .server_id,
                  pelican_url: .pelican_url,
                  api_key_secret: .api_key_secret
                } )
              ]
            else
              []
            end
          ' "$SERVER_CONFIG")

          echo "$TARGETS" | jq .
          echo "targets=$TARGETS" >> $GITHUB_OUTPUT

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build plugin
        id: build_plugin
        run: |
          echo "🔍 Detecting build system..."
          if [ -f "pom.xml" ]; then
            echo "📦 Maven project"
            mvn clean package -DskipTests
            PLUGIN_FILE=$(find . -name "*.jar" -path "*/target/*" -not -name "original-*.jar" | head -n 1)
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "📦 Gradle project"
            chmod +x gradlew
            ./gradlew clean build
            PLUGIN_FILE=$(find . -name "*.jar" -path "*/build/libs/*" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -n 1)
          elif [ -d "plugins" ] && [ "$(ls -A plugins/*.jar 2>/dev/null)" ]; then
            echo "📦 Pre-built plugin detected"
            PLUGIN_FILE=$(ls plugins/*.jar | head -n 1)
          else
            echo "❌ No plugin found"
            exit 1
          fi

          if [ -z "$PLUGIN_FILE" ]; then
            echo "❌ Plugin JAR not found"
            exit 1
          fi

          mkdir -p plugins
          cp "$PLUGIN_FILE" plugins/
          
          PLUGIN_NAME=$(grep '^name:' src/main/resources/plugin.yml | cut -d ' ' -f 2 | tr -d '\r')
          PLUGIN_FILENAME=$(basename "$PLUGIN_FILE")

          echo "plugin_name=${PLUGIN_NAME}" >> $GITHUB_OUTPUT
          echo "plugin_filename=${PLUGIN_FILENAME}" >> $GITHUB_OUTPUT
          echo "✅ Built plugin: $PLUGIN_FILENAME"

      - name: Upload plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin
          path: plugins/

      - name: Report build failure
        if: failure()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                "embeds": [{
                  "title": "🔨 Build Failed",
                  "description": "Failed to build plugin for deployment",
                  "color": 15158332,
                  "fields": [
                    {
                      "name": "Repository",
                      "value": "${{ github.repository }}",
                      "inline": true
                    },
                    {
                      "name": "Branch",
                      "value": "${{ github.ref_name }}",
                      "inline": true
                    },
                    {
                      "name": "Commit",
                      "value": "[`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                      "inline": true
                    }
                  ],
                  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                }]
              }' \
              "${{ secrets.DISCORD_WEBHOOK }}"
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJson(needs.build.outputs.targets) }}
    steps:
      - name: Download built plugin
        uses: actions/download-artifact@v4
        with:
          name: plugin
          path: plugins

      - name: Deploy to server
        run: |
          set -e
          SERVER_ID="${{ matrix.target.server_id }}"
          PELICAN_URL="${{ matrix.target.pelican_url }}"
          API_KEY_SECRET="${{ matrix.target.api_key_secret }}"
          API_KEY="${{ secrets[matrix.target.api_key_secret] }}"
          PLUGIN_NAME="${{ needs.build.outputs.plugin_name }}"
          PLUGIN_FILENAME="${{ needs.build.outputs.plugin_filename }}"

          echo "📤 Deploying to $SERVER_ID ($PELICAN_URL)"

          # Remove old plugins
          RESPONSE=$(curl -s \
            -H "Authorization: Bearer $API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/list?directory=%2Fplugins")
          FILES=$(echo "$RESPONSE" | jq -r --arg plugin_name "$PLUGIN_NAME" '.data[]? | select(.attributes.is_file and (.attributes.name | startswith($plugin_name)) and (.attributes.name | endswith(".jar"))) | .attributes.name')
          for file in $FILES; do
            curl -s -X POST \
              -H "Authorization: Bearer $API_KEY" \
              -H "Content-Type: application/json" \
              "$PELICAN_URL/api/client/servers/$SERVER_ID/files/delete" \
              -d "{\"root\":\"/plugins\",\"files\":[\"$file\"]}"
            echo "Deleted $file"
          done

          # Upload new plugin
          UPLOAD_URL=$(curl \
            -H "Authorization: Bearer $API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/upload" \
            | jq -r '.attributes.url')

          curl -X POST \
            -H "Authorization: Bearer $API_KEY" \
            -F "files=@plugins/$PLUGIN_FILENAME" \
            "$UPLOAD_URL&directory=%2Fplugins"

          echo "✅ Uploaded plugin to $SERVER_ID"

      - name: Upload manifest
        run: |
          set -e
          SERVER_ID="${{ matrix.target.server_id }}"
          PELICAN_URL="${{ matrix.target.pelican_url }}"
          API_KEY_SECRET="${{ matrix.target.api_key_secret }}"
          API_KEY="${{ secrets[matrix.target.api_key_secret] }}"

          UPLOAD_URL=$(curl \
            -H "Authorization: Bearer $API_KEY" \
            "$PELICAN_URL/api/client/servers/$SERVER_ID/files/upload" \
            | jq -r '.attributes.url')

          cat > deployment-manifest.json <<EOF
          {
            "timestamp":"$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit":"${{ github.sha }}",
            "branch":"${{ github.ref_name }}",
            "repository":"${{ github.repository }}",
            "plugin":"${{ github.repository }}",
            "server_id":"$SERVER_ID",
            "pelican_url":"$PELICAN_URL"
          }
          EOF

          curl -X POST \
            -H "Authorization: Bearer $API_KEY" \
            -F "files=@deployment-manifest.json" \
            "$UPLOAD_URL&directory=%2F"

          echo "✅ Manifest uploaded for $SERVER_ID"

      - name: Report deployment success
        if: success()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                "embeds": [{
                  "title": "🚀 Deployment Successful",
                  "description": "Plugin successfully deployed to server",
                  "color": 3066993,
                  "fields": [
                    {
                      "name": "Plugin",
                      "value": "${{ needs.build.outputs.plugin_name }}",
                      "inline": true
                    },
                    {
                      "name": "Server",
                      "value": "${{ matrix.target.name }} (${{ matrix.target.server_id }})",
                      "inline": true
                    },
                    {
                      "name": "Repository",
                      "value": "${{ github.repository }}",
                      "inline": true
                    },
                    {
                      "name": "Branch",
                      "value": "${{ github.ref_name }}",
                      "inline": true
                    },
                    {
                      "name": "Commit",
                      "value": "[`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                      "inline": true
                    },
                    {
                      "name": "File",
                      "value": "${{ needs.build.outputs.plugin_filename }}",
                      "inline": true
                    }
                  ],
                  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                }]
              }' \
              "${{ secrets.DISCORD_WEBHOOK }}"
          fi

      - name: Report deployment failure
        if: failure()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                "embeds": [{
                  "title": "❌ Deployment Failed",
                  "description": "Failed to deploy plugin to server",
                  "color": 15158332,
                  "fields": [
                    {
                      "name": "Plugin",
                      "value": "${{ needs.build.outputs.plugin_name }}",
                      "inline": true
                    },
                    {
                      "name": "Server",
                      "value": "${{ matrix.target.name }} (${{ matrix.target.server_id }})",
                      "inline": true
                    },
                    {
                      "name": "Repository",
                      "value": "${{ github.repository }}",
                      "inline": true
                    },
                    {
                      "name": "Branch",
                      "value": "${{ github.ref_name }}",
                      "inline": true
                    },
                    {
                      "name": "Commit",
                      "value": "[`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                      "inline": true
                    }
                  ],
                  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                }]
              }' \
              "${{ secrets.DISCORD_WEBHOOK }}"
          fi

  deployment-summary:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report deployment summary
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            if [ "${{ needs.deploy.result }}" = "success" ]; then
              TOTAL_TARGETS=$(echo '${{ needs.build.outputs.targets }}' | jq length)
              curl -H "Content-Type: application/json" \
                -X POST \
                -d '{
                  "embeds": [{
                    "title": "✅ All Deployments Complete",
                    "description": "Successfully deployed to all '$TOTAL_TARGETS' configured servers",
                    "color": 3066993,
                    "fields": [
                      {
                        "name": "Plugin",
                        "value": "${{ needs.build.outputs.plugin_name }}",
                        "inline": true
                      },
                      {
                        "name": "Repository",
                        "value": "${{ github.repository }}",
                        "inline": true
                      },
                      {
                        "name": "Branch",
                        "value": "${{ github.ref_name }}",
                        "inline": true
                      },
                      {
                        "name": "Servers Deployed",
                        "value": "'$TOTAL_TARGETS'",
                        "inline": true
                      },
                      {
                        "name": "Workflow",
                        "value": "[View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                        "inline": true
                      }
                    ],
                    "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                  }]
                }' \
                "${{ secrets.DISCORD_WEBHOOK }}"
            elif [ "${{ needs.build.result }}" = "failure" ]; then
              echo "Build failed - notification already sent"
            else
              curl -H "Content-Type: application/json" \
                -X POST \
                -d '{
                  "embeds": [{
                    "title": "⚠️ Deployment Issues",
                    "description": "Some deployments may have failed. Check the workflow for details.",
                    "color": 16776960,
                    "fields": [
                      {
                        "name": "Plugin",
                        "value": "${{ needs.build.outputs.plugin_name }}",
                        "inline": true
                      },
                      {
                        "name": "Repository",
                        "value": "${{ github.repository }}",
                        "inline": true
                      },
                      {
                        "name": "Branch",
                        "value": "${{ github.ref_name }}",
                        "inline": true
                      },
                      {
                        "name": "Build Status",
                        "value": "${{ needs.build.result }}",
                        "inline": true
                      },
                      {
                        "name": "Deploy Status",
                        "value": "${{ needs.deploy.result }}",
                        "inline": true
                      },
                      {
                        "name": "Workflow",
                        "value": "[View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                        "inline": true
                      }
                    ],
                    "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                  }]
                }' \
                "${{ secrets.DISCORD_WEBHOOK }}"
            fi
          fi